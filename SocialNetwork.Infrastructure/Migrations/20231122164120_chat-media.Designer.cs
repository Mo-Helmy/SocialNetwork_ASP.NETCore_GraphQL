// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialNetwork.Infrastructure.Data;

#nullable disable

namespace SocialNetwork.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231122164120_chat-media")]
    partial class chatmedia
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Chat", b =>
                {
                    b.Property<int>("ChatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatID"));

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.ChatParticipant", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("ChatID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "ChatID");

                    b.HasIndex("ChatID");

                    b.ToTable("ChatParticipants");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("PostID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Friendship", b =>
                {
                    b.Property<int>("FriendshipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendshipID"));

                    b.Property<int>("FriendshipStatus")
                        .HasColumnType("int");

                    b.Property<int>("User1ID")
                        .HasColumnType("int");

                    b.Property<int>("User2ID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FriendshipID");

                    b.HasIndex("User1ID");

                    b.HasIndex("User2ID");

                    b.HasIndex("UserID");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Group", b =>
                {
                    b.Property<int>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorUserID")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupStatus")
                        .HasColumnType("int");

                    b.HasKey("GroupID");

                    b.HasIndex("CreatorUserID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.GroupMember", b =>
                {
                    b.Property<int>("GroupMemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupMemberID"));

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("GroupMemberID");

                    b.HasIndex("GroupID");

                    b.HasIndex("UserID");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Hashtag", b =>
                {
                    b.Property<int>("HashtagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HashtagID"));

                    b.Property<string>("HashtagText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HashtagID");

                    b.ToTable("Hashtags");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Media", b =>
                {
                    b.Property<int>("MediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaID"));

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MessageID")
                        .HasColumnType("int");

                    b.Property<int?>("PostID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MediaID");

                    b.HasIndex("MessageID");

                    b.HasIndex("PostID");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<int>("ChatID")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderUserID")
                        .HasColumnType("int");

                    b.HasKey("MessageID");

                    b.HasIndex("ChatID");

                    b.HasIndex("SenderUserID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Page", b =>
                {
                    b.Property<int>("PageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PageID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorUserID")
                        .HasColumnType("int");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PageID");

                    b.HasIndex("CreatorUserID");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.PageFollower", b =>
                {
                    b.Property<int>("PageFollowerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PageFollowerID"));

                    b.Property<int>("PageID")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PageFollowerID");

                    b.HasIndex("PageID");

                    b.HasIndex("UserID");

                    b.ToTable("PageFollowers");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostID"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupID")
                        .HasColumnType("int");

                    b.Property<int?>("PageID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RelatedGroupID")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedPageID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PostID");

                    b.HasIndex("GroupID");

                    b.HasIndex("PageID");

                    b.HasIndex("UserID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.PostHashtag", b =>
                {
                    b.Property<int>("PostHashtagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostHashtagID"));

                    b.Property<int>("HashtagID")
                        .HasColumnType("int");

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.HasKey("PostHashtagID");

                    b.HasIndex("HashtagID");

                    b.HasIndex("PostID");

                    b.ToTable("PostHashtags");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Reaction", b =>
                {
                    b.Property<int>("ReactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionID"));

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReactionID");

                    b.HasIndex("PostID");

                    b.HasIndex("UserID");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.ChatParticipant", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.Chat", "Chat")
                        .WithMany("Participants")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Domain.Entities.User", "User")
                        .WithMany("ChatParticipants")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Comment", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Friendship", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.User", "User1")
                        .WithMany()
                        .HasForeignKey("User1ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Domain.Entities.User", "User2")
                        .WithMany()
                        .HasForeignKey("User2ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Domain.Entities.User", null)
                        .WithMany("Friendships")
                        .HasForeignKey("UserID");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Group", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.User", "CreatorUser")
                        .WithMany("GroupsCreated")
                        .HasForeignKey("CreatorUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorUser");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.GroupMember", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Domain.Entities.User", "User")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Media", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.Message", "Message")
                        .WithMany("Medias")
                        .HasForeignKey("MessageID");

                    b.HasOne("SocialNetwork.Domain.Entities.Post", "Post")
                        .WithMany("Medias")
                        .HasForeignKey("PostID");

                    b.Navigation("Message");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Message", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Domain.Entities.User", "SenderUser")
                        .WithMany("Messages")
                        .HasForeignKey("SenderUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Notification", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Page", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.User", "CreatorUser")
                        .WithMany("PagesCreated")
                        .HasForeignKey("CreatorUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorUser");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.PageFollower", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.Page", "Page")
                        .WithMany("PageFollowers")
                        .HasForeignKey("PageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Domain.Entities.User", "User")
                        .WithMany("PageFollowers")
                        .HasForeignKey("UserID");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Post", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.Group", "Group")
                        .WithMany("Posts")
                        .HasForeignKey("GroupID");

                    b.HasOne("SocialNetwork.Domain.Entities.Page", "Page")
                        .WithMany("Posts")
                        .HasForeignKey("PageID");

                    b.HasOne("SocialNetwork.Domain.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.PostHashtag", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.Hashtag", "Hashtag")
                        .WithMany("PostHashtags")
                        .HasForeignKey("HashtagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Domain.Entities.Post", "Post")
                        .WithMany("PostHashtags")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hashtag");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Reaction", b =>
                {
                    b.HasOne("SocialNetwork.Domain.Entities.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Group", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Hashtag", b =>
                {
                    b.Navigation("PostHashtags");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Message", b =>
                {
                    b.Navigation("Medias");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Page", b =>
                {
                    b.Navigation("PageFollowers");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Medias");

                    b.Navigation("PostHashtags");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("SocialNetwork.Domain.Entities.User", b =>
                {
                    b.Navigation("ChatParticipants");

                    b.Navigation("Comments");

                    b.Navigation("Friendships");

                    b.Navigation("GroupMemberships");

                    b.Navigation("GroupsCreated");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("PageFollowers");

                    b.Navigation("PagesCreated");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
